use salvo::oapi::extract::*;
use salvo::prelude::*;
use serde::Serialize;

// Dummy coupon list for demonstration purposes
const COUPON_LIST: [&str; 3] = ["COUPON1", "COUPON2", "COUPON3"];


#[derive(Serialize)]
struct CouponStatus {
    coupon: String,
    available: bool,
}

#[endpoint]
async fn coupon_check(coupon: QueryParam<String, false>) -> String {
//    format!("Coupon, {}!", coupon.as_deref().unwrap_or("World"));
    let coupon_str = coupon.as_deref().unwrap_or_default();

    let is_available = COUPON_LIST.contains(&coupon_str);
    let result = CouponStatus {
        coupon: coupon_str.to_string(),
        available: is_available,
    };

    serde_json::to_string(&result).unwrap()
}

#[tokio::main]
async fn main() {
    tracing_subscriber::fmt().init();

    let router = Router::new().push(Router::with_path("api").get(coupon_check));

    let doc = OpenApi::new("test api | Coupon Check API", "0.0.1").merge_router(&router);

    let router = router
        .push(doc.into_router("/api-doc/openapi.json"))
        .push(SwaggerUi::new("/api-doc/openapi.json").into_router("swagger-ui"));

    let acceptor = TcpListener::new("0.0.0.0:8091").bind().await;
    Server::new(acceptor).serve(router).await;
}

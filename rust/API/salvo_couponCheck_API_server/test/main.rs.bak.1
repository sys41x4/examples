use reqwest::blocking::get;
use salvo::oapi::extract::*;
use salvo::prelude::*;
use std::collections::HashSet;
use serde::{Deserialize, Serialize};
use csv::ReaderBuilder;
use std::error::Error;
use std::fs::File;
use std::fs;
use std::iter::FromIterator;
use tokio::runtime::Runtime;
use tokio::task::JoinHandle;
use once_cell::sync::Lazy;
use std::sync::{Arc, Mutex};
use once_cell::sync::OnceCell;
use std::sync::MutexGuard;
use lazy_static::lazy_static;
use salvo::http::StatusCode;
//use runtime::Builder::new_multi_thread;

use async_std::task;
//use tokio::task;
use reqwest::blocking::Client;

#[derive(Clone, serde::Serialize, serde::Deserialize)]
struct ServerConfig {
    coupon_code_fp: String,
    coupon_code_remote_url_ep: String,
    fetchable_column_name: String,
}

#[derive(serde::Deserialize)]
struct Config {
    server: ServerConfig,
}

#[derive(Serialize, Deserialize)]
struct CouponStatus {
    coupon: String,
    available: bool,
}

#[derive(Debug, Deserialize)]
struct CouponCodeRow {
    coupon_code: String,
}

static CONFIG: Lazy<Mutex<Config>> = Lazy::new(|| {
    let config_content = fs::read_to_string("config/server.toml").expect("Failed to read server.toml");
    let config: Config = toml::from_str(&config_content).expect("Failed to parse config.toml");
    Mutex::new(config)
});

static COUPON_LIST: Lazy<HashSet<String>> = Lazy::new(|| {
    let rt = tokio::runtime::Runtime::new().unwrap();
    rt.block_on(init_coupon_list())
});


static COUPON_CODES: Lazy<Mutex<HashSet<String>>> = Lazy::new(|| Mutex::new(HashSet::new()));

//#[tokio::test]
async fn fetch_and_store_coupon_codes() -> Result<(), Box<dyn Error>> {
    let url = "https://sys41x4.github.io/examples/data/coupon_code_rows.csv";

    let response = Client::new().get(url).send()?;
    let response_text = response.text()?;

    let mut rdr = ReaderBuilder::new().from_reader(response_text.as_bytes());

    // Get the header row to find the index of the "coupon_code" column
    let headers = rdr.headers()?.clone();
    let coupon_code_index = headers.iter().position(|header| header == "coupon_code");

    for result in rdr.records() {
        let record = result?;
        if let Some(index) = coupon_code_index {
            if let Some(coupon_code) = record.get(index) {
                COUPON_CODES.lock().unwrap().insert(coupon_code.to_string());
            }
        }
    }
    //std::mem::forget(response_text);

    Ok(())
}


/*
lazy_static! {
    static ref CONFIG: Arc<Mutex<Config>> = {
        // Read the contents of config.toml
        let config_content = fs::read_to_string("config/server.toml").expect("Failed to read server.toml");
        // Parse the TOML configuration into the Config struct
        let config: Config = toml::from_str(&config_content).expect("Failed to parse server.toml");
        Arc::new(Mutex::new(config))
    };
}*/

fn read_csv_file(file_path: &str) -> Result<HashSet<String>, Box<dyn Error>> {
    let file = File::open(file_path)?;
    let mut rdr = ReaderBuilder::new().has_headers(true).from_reader(file);

    let mut coupon_codes = HashSet::new();
    for result in rdr.deserialize() {
        let record: CouponCodeRow = result?;
        coupon_codes.insert(record.coupon_code);
    }

    Ok(coupon_codes)
}

// Helper function to fetch the CSV data
async fn fetch_csv_data_from_url(url: &str, column_name: &str) -> Result<Vec<String>, Box<dyn Error>> {
    let response = reqwest::get(url).await?.text().await?;
    let mut csv_data = csv::Reader::from_reader(response.as_bytes());

    let header = csv_data.headers()?.clone();
    let mut result = Vec::new();

    for record in csv_data.records() {
        let record = record?;

        if let Some(index) = header.iter().position(|col| col == column_name) {
            if let Some(field) = record.get(index) {
                result.push(field.to_string());
            }
        }
    }

    Ok(result)
}

async fn init_coupon_list() -> HashSet<String> {
    let server_config = {
        let config = CONFIG.lock().unwrap();
        config.server.clone() // Clone the ServerConfig inside the Mutex
    };

    match fetch_csv_data_from_url(
        &server_config.coupon_code_remote_url_ep,
        &server_config.fetchable_column_name,
    )
    .await
    {
        Ok(result) => HashSet::from_iter(result),
        Err(err) => {
            eprintln!("Error fetching CSV data: {}", err);
            HashSet::new()
        }
    }
}

#[endpoint]
async fn coupon_check(coupon: QueryParam<String, false>) -> String {
    let coupon_str = coupon.as_deref().unwrap_or_default();
    // let is_available = COUPON_LIST.contains(&coupon_str.to_string());
    //let coupon_list = init_coupon_list().await;
    
    // let is_available = coupon_list.contains(&coupon_str.to_string());
    let is_available = {
        let coupon_list = COUPON_CODES.lock().unwrap();
        coupon_list.contains(&coupon_str.to_string())
    };
    let result = CouponStatus {
        coupon: coupon_str.to_string(),
        available: is_available,
    };
    serde_json::to_string(&result).unwrap()
}

/*
async fn main_async() {
    // Access COUPON_LIST and print its data
    let global_coupon_list = COUPON_LIST.lock().unwrap();
    println!("COUPON_LIST: {:?}", *global_coupon_list);
}
*/


#[tokio::main]
async fn main() {
    tracing_subscriber::fmt().init();

    // Load CSV data from Remote URL endpoint
    task::block_on(async {
        if let Err(e) = fetch_and_store_coupon_codes().await {
            eprintln!("Error: {}", e);
        }

        /* 
        // Print the list content
        let coupon_list = COUPON_CODES.lock().unwrap();
        println!("Coupon Codes: {:?}", *coupon_list);
        */
    });
   
    let router = Router::new().push(Router::with_path("api").get(coupon_check));
    let doc = OpenApi::new("test api | Coupon Check API", "0.0.1").merge_router(&router);
    let router = router
        .push(doc.into_router("/api-doc/openapi.json"))
        .push(SwaggerUi::new("/api-doc/openapi.json").into_router("swagger-ui"));
    let acceptor = TcpListener::new("0.0.0.0:8091").bind().await;
    Server::new(acceptor).serve(router).await;
}
